/**
 * -=-=-=-=-=-=-=-=-
 *     WRAPPER
 * -=-=-=-=-=-=-=-=-
 * The Wrapper object is used to create the outer boundary on which page content will not exceed. It differs from a
 * container, as it's width is not breakpoint dependent, but instead is a single max-width that only takes effect
 * when the screensize is wider than that max-width.
 *
 * On all screen sizes, it applies a padding to prevent text from sitting too closely to the edges of the screen.
 *
 * A Wrapper is similar to a Content, but is designed to be used to constrain page level elements, rather than
 * individual pieces of content. You may of course use a Content inside of a Wrapper, which is expected.
 */

// Initialise globals in case this object is used without the framework
$OBJECT_PREFIX: '' !default;
$THEME: (
  'wrapper': (
    'padding': (
      'default': 20px,
      'md': 40px,
      'lg': 56px,
      'xl': 80px,
    ),
    'maxWidth': (
      'default': 1080px,
      'sm': 800px,
      'lg': 1200px,
    ),
  ),
) !default;

// Get settings from the global theme settings
$wrapper-padding: captain('wrapper', 'padding');
$wrapper-max-widths: captain('wrapper', 'maxWidth');

// Create the class, adding the prefix defined in the config
$wrapper: #{'.' + $OBJECT_PREFIX + 'wrapper'};

@responsive {
  #{$wrapper} {
    box-sizing: border-box;
    display: block;
    margin-left: auto;
    margin-right: auto;
    width: 100%;

    @each $breakpoint-name, $spacing-unit in $wrapper-padding {
      @include screen($breakpoint-name) {
        padding-left: #{$spacing-unit};
        padding-right: #{$spacing-unit};
      }
    }

    @each $spacing-name, $spacing-unit in $wrapper-max-widths {
      @include modifier($spacing-name) {
        max-width: #{$spacing-unit};
      }
    }
  }
}
