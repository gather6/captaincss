/**
 * -=-=-=-=-=-=-=-=-
 *     CLUSTER
 * -=-=-=-=-=-=-=-=-
 * The cluster solves a common problem of grouping undetermined width, non-block elements together compactly, but with
 * consistent spacing to the sides and above or below the component. It does this without leaving extra space on the
 * end components, by stripping it away with a negative margin.
 *
 * It is great for grouping list items, buttons or anything else that needs consistent spacing, even when wrapping
 * onto multiple lines.
 */

// Initialise globals in case this object is used without the framework
$OBJECT_PREFIX: '' !default;
$THEME: (
  'cluster': (
    'gap': map-merge(('default': 1rem), $tw-space),
  ),
) !default;

// Get settings from the global theme settings
$cluster-gap-sizes: captain('cluster', 'gap');

// Create the class, adding the prefix defined in the config
$cluster: #{'.' + $OBJECT_PREFIX + 'cluster'};

@responsive {
  #{$cluster} {
    overflow: hidden;

    & > * {
      align-items: center;
      display: flex;
      flex-wrap: wrap;
      justify-content: flex-start;
    }

    @each $spacing-name, $spacing-unit in $cluster-gap-sizes {
      @include modifier($spacing-name, $suffix: ' > *') {
        margin: #{$spacing-unit / 2 * -1};
      }

      @include modifier($spacing-name, $suffix: ' > * > *') {
        margin: #{$spacing-unit / 2 * 1}; // * 1 necessary or SCSS won't interpolate
      }
    }
  }
}
